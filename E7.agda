-- First steps in Agda: using the Standard Library.

module E7 where

  -- Let's get serious.  Agda has a fairly well-developed Standard Library that, with
  -- the exception of the Level module, we have been ignoring to date.  Let's now use
  -- some of the definitions in that library to push our understanding further:

  -- For universe levels
  open import Level

  -- For functions that combine other functions in useful ways, for example composition,
  -- generalised curry and uncurry functions, the identity combinator, and so on.
  open import Function

  -- The Booleans, naturals and lists.
  open import Data.Bool
  open import Data.Nat
  open import Data.List

  -- Propositional equality, and related notions.
  open import Relation.Binary.PropositionalEquality
    hiding ([_]) -- this clashes with the definition of singleton list in Data.List

  -- You can, as always, inspect the contents of these modules by middle mouse-clicking
  -- on their names after Agda has type-checked and syntax highlighted the files.

  -- Let's write a function that removes duplicate elements from a list.  In Haskell, this
  -- function is called `nub'.  We'll use the same name here.
  --
  -- Naturally, we have a problem when writing `nub'.  How do we decide if two elements of
  -- a list are equal?  In Haskell, this problem is solved by adding a type-class constraint
  -- to the type of `nub', ensuring we can compare elements of the list.  We will avoid using
  -- Agda's equivalent of type classes for the moment, though (they're strictly less powerful
  -- than Haskell's, for a start, and I try not to use them myself), in favour of using some
  -- other techniques.  However, we can start by taking as argument to the `nub' function
  -- another function that compares elements for equality:

  member‚ÇÅ : {‚Ñì : Level} ‚Üí {A : Set ‚Ñì} ‚Üí (A ‚Üí A ‚Üí Bool) ‚Üí A ‚Üí List A ‚Üí Bool
  member‚ÇÅ comp e []       = false
  member‚ÇÅ comp e (x ‚à∑ xs) = if comp e x then true else member‚ÇÅ comp e xs

  nub‚ÇÅ : {‚Ñì : Level} ‚Üí {A : Set ‚Ñì} ‚Üí (A ‚Üí A ‚Üí Bool) ‚Üí List A ‚Üí List A
  nub‚ÇÅ comp xs = go comp [] xs
    where
      go : {‚Ñì : Level} ‚Üí {A : Set ‚Ñì} ‚Üí (A ‚Üí A ‚Üí Bool) ‚Üí List A ‚Üí List A ‚Üí List A
      go comp buffer []       = buffer
      go comp buffer (x ‚à∑ xs) =
        if member‚ÇÅ comp x buffer then
          go comp buffer xs
        else
          go comp (buffer ++ [ x ]) xs

  -- Here _++_ is list append, what we called _‚äï_ in our previous exercises.
  --
  -- As you can see, Agda allows local function and constant definitions in a function clause
  -- via the use of the `where' keyword, similar to Haskell.
  --
  -- Let's test nub‚ÇÅ:

  _‚âà_ : Bool ‚Üí Bool ‚Üí Bool
  true  ‚âà c = c
  false ‚âà c = not c

  nub-test : _
  nub-test = {!nub‚ÇÅ _‚âà_ (true ‚à∑ true ‚à∑ false ‚à∑ [])!}

  -- Put your cursor in the hole above and type <Ctrl> + <c> + <n>.  This `normalises' the term
  -- in the hole (i.e. it fully executes nub‚ÇÅ on the given arguments) and prints the result in
  -- a window below.  You should see something like true ‚à∑ false ‚à∑ [] as a result.  You could
  -- alternatively just press <Ctrl> + <c> + <n> at any time and type in what you want to normalise
  -- without creating a dummy hole like nub-test above to do it.
  --
  -- But that passing around a function between nub‚ÇÅ and member isn't particularly nice.  The
  -- function never is changed, it's just passed between the two functions in an act of book-
  -- keeping.  It would be nicer if we could just assume its presence and use it.
  --
  -- Agda has a mechanism for achieving this, via nested, parameterised modules.  Let's rewrite
  -- member and nub to make use of these:

  module AssumesComparison {‚Ñì : Level} {A : Set ‚Ñì} (_‚âà_ : A ‚Üí A ‚Üí Bool) where

    _‚àà‚ÇÇ_ : A ‚Üí List A ‚Üí Bool
    e ‚àà‚ÇÇ []       = false
    e ‚àà‚ÇÇ (x ‚à∑ xs) = if e ‚âà x then true else e ‚àà‚ÇÇ xs

    nub‚ÇÇ : List A ‚Üí List A
    nub‚ÇÇ xs = go [] xs
      where
        go : List A ‚Üí List A ‚Üí List A
        go buffer []       = buffer
        go buffer (x ‚à∑ xs) =
          if x ‚àà‚ÇÇ buffer then
            go buffer xs
          else
            go (buffer ++ [ x ]) xs

  -- Much neater.  But now how do we use nub‚ÇÇ and _‚àà‚ÇÇ_?  We must open the AssumesComparison module,
  -- providing the fixed comparison function when we do so.  For example:

  open AssumesComparison _‚âà_ -- where _‚âà_ is the Bool comparison defined above

  nub-test‚ÇÇ : _
  nub-test‚ÇÇ = {!nub‚ÇÇ (true ‚à∑ true ‚à∑ false ‚à∑ [])!}

  -- And everything works once more.
  --
  -- However, there is still something unsatisfying about our definitions.  Recall that
  -- PropositionalEquality is able to test whether two elements of *any* type are equal.  Using
  -- PropositionalEquality, we'd be able to dispense with type-specific comparison functions
  -- altogether in favour of a uniform treatment of comparison across all types.  In short, we'd
  -- be able to write nub‚ÇÉ that worked for any and every type.
  --
  -- However, note what we are doing in the definition of nub‚ÇÅ and nub‚ÇÇ: we are branching on the
  -- result of the comparison function _‚âà_, doing one thing if it returns true, and another thing
  -- if it is not, using if_then_else_.  To be able to use _‚â°_ instead of _‚âà_ we need to be able
  -- to branch on whether e ‚â° x or not in the definition of _‚àà_.  We cannot use if_then_else_, as
  -- that is for Bool, so what can we use?
  --
  -- Let's experiment:

  -- First, we'll show that at type Bool, _‚â°_ is decidable.  What does decidable mean?  It means
  -- that for every b, c of type Bool, it is either the case that b ‚â° c, or it is the case that
  -- b ‚â¢ c.

  -- The definition of decidability resides in the following module.  Middle mouse-click to take
  -- a look:
  open import Relation.Binary
  -- The definition of Dec, which is also used to define decidability, is in the following module:
  open import Relation.Nullary  -- JDW: current stdlib (2.5.1) has no Relation.Nullary.Core.
                                -- See 3264b9e in agda-stdlib.
  -- This is the empty type, what we previously called ùüò.  In the Agda standard library, this type
  -- is now called ‚ä•.  What we also previously called ex-falso is called ‚ä•-elim.  Both will be
  -- needed below.
  open import Data.Empty

  Bool-Decidable‚ÇÅ : Decidable (_‚â°_ {A = Bool})
  Bool-Decidable‚ÇÅ = {!!}

  -- Take a look at the type of the hole above, and see what we need to supply.  At the moment the
  -- type is `Decidable _‚â°_'.  This is a synonym for (b : Bool) ‚Üí (c : Bool) ‚Üí Dec (b ‚â° c).  Let's
  -- further refine Bool-Decidable:

  Bool-Decidable‚ÇÇ : Decidable (_‚â°_ {A = Bool})
  Bool-Decidable‚ÇÇ b c = {!!}

  -- We must now show Dec (b ‚â° c).  Dec is a data type with two constructors, yes, which will be used
  -- to signal that b ‚â° c, and no, which will be used to signal b ‚â¢ c.  Let's proceed by pattern
  -- matching on b and c:

  Bool-Decidable‚ÇÉ : Decidable (_‚â°_ {A = Bool})
  Bool-Decidable‚ÇÉ true  true  = {!!}
  Bool-Decidable‚ÇÉ true  false = {!!}
  Bool-Decidable‚ÇÉ false true  = {!!}
  Bool-Decidable‚ÇÉ false false = {!!}

  -- You'll note that now the types have changed in the holes, in light of us revealing more information
  -- about b and c to the typechecker via pattern matching.  In the first hole, we now have to show that
  -- Dec (true ‚â° true).  Clearly true ‚â° true, via refl, so we can use `yes', here:

  Bool-Decidable‚ÇÑ : Decidable (_‚â°_ {A = Bool})
  Bool-Decidable‚ÇÑ true  true  = yes refl
  Bool-Decidable‚ÇÑ true  false = {!!}
  Bool-Decidable‚ÇÑ false true  = {!!}
  Bool-Decidable‚ÇÑ false false = {!!}

  -- A little note about what we are doing, now: we are being asked to consider all cases and construct
  -- proofs that either b ‚â° c, or b ‚â¢ c, embedding these proofs in the constructors of a datatype called
  -- Dec.  But, as Dec is just another data type, we will be free later to pattern match on elements of
  -- type Dec and retrieve these proofs.  That is, Dec is not merely a way of performing branching like
  -- if_then_else_, but it is also informative, providing documentary evidence, in the form of proofs,
  -- of why we should branch one way or the other.  This will be useful later when we come to prove things
  -- about various functions --- the more information we know, the better!
  --
  -- Back to Bool-Decidable: the last case asks us to show Dec (false ‚â° false).  Clearly false ‚â° false, so
  -- we will use `yes' again here to close the hole.  However, the middle two holes ask us to show
  -- Dec (true ‚â° false) (and its symmetrical counterpart), respectively.  Clearly true ‚â¢ false, so we will
  -- use instead the `no' constructor this time:

  Bool-Decidable‚ÇÖ : Decidable (_‚â°_ {A = Bool})
  Bool-Decidable‚ÇÖ true  true  = yes refl
  Bool-Decidable‚ÇÖ true  false = no {!!}
  Bool-Decidable‚ÇÖ false true  = no {!!}
  Bool-Decidable‚ÇÖ false false = yes refl

  -- Look at the types of the holes.  We are now asked to show ¬¨ true ‚â° false (and symmetrically, ¬¨ false ‚â° true).
  -- Remember how ¬¨ is encoded in Agda: ¬¨ true ‚â° false is a synonym for true ‚â° false ‚Üí ‚ä•, where ‚ä• is the
  -- empty type, what we suggestively called ùüò in our previous exercises.  We can therefore refine our holes
  -- further, as Œª-abstractions:

  Bool-Decidable‚ÇÜ : Decidable (_‚â°_ {A = Bool})
  Bool-Decidable‚ÇÜ true  true  = yes refl
  Bool-Decidable‚ÇÜ true  false = no (Œª x ‚Üí {!!})
  Bool-Decidable‚ÇÜ false true  = no (Œª x ‚Üí {!!})
  Bool-Decidable‚ÇÜ false false = yes refl

  -- Look at the goal states again.  We have to construct an element of ‚ä• given a variable of type false ‚â° true
  -- or true ‚â° false.  Clearly true ‚â° false is absurd, so we should be able to deduce anything from it,
  -- including ‚ä•.  Let's introduce a lemma:

  true-false-absurd‚ÇÅ : {‚Ñì : Level} ‚Üí {A : Set ‚Ñì} ‚Üí true ‚â° false ‚Üí A
  true-false-absurd‚ÇÅ true‚â°false = {!!}

  -- true ‚â° false is indeed absurd, and Agda can recognise this.  Pattern matching on true‚â°false, Agda replaces
  -- the pattern variable with the absurd pattern, closing the proof obligation, and we are done:

  true-false-absurd : {‚Ñì : Level} ‚Üí {A : Set ‚Ñì} ‚Üí true ‚â° false ‚Üí A
  true-false-absurd ()

  -- We can now complete Bool-Decidable:

  Bool-Decidable : Decidable (_‚â°_ {A = Bool})
  Bool-Decidable true  true  = yes refl
  Bool-Decidable true  false = no (Œª x ‚Üí true-false-absurd x)
  Bool-Decidable false true  = no (Œª x ‚Üí true-false-absurd (sym x))
  Bool-Decidable false false = yes refl

  -- Let's try to write a variant of nub that makes use of the decidability of _‚â°_ at a given
  -- type:

  module AssumesDecidability {‚Ñì : Level} {A : Set ‚Ñì} (‚â°-decidable : Decidable (_‚â°_ {A = A})) where

    -- The unit type, which we previously called ùüô, is called ‚ä§ in Agda's standard library.  We'll
    -- need it for what follows.  Note you can import other modules inside nested modules:
    open import Data.Unit

    -- Define list membership:

    _‚àà_ : A ‚Üí List A ‚Üí Set
    e ‚àà []       = ‚ä•
    e ‚àà (x ‚à∑ xs) with ‚â°-decidable e x
    ... | yes e‚â°x = ‚ä§
    ... | no  e‚â¢x = e ‚àà xs

    -- Note that we are no longer using Bool to signal membership.  Rather, we are using Set, and using
    -- ‚ä• and ‚ä§ for True and False (recall our previous discussions on how to embed logic in Agda's types)!

    nub‚ÇÉ : List A ‚Üí List A
    nub‚ÇÉ xs = go [] xs
      where
        go : List A ‚Üí List A ‚Üí List A
        go buffer []       = {!!}
        go buffer (x ‚à∑ xs) = {!!}

    -- Hmm, we are stuck.  We now need to test whether x ‚àà buffer, but now _‚àà_ is in Set, not Bool, and
    -- therefore we cannot use if_then_else_.  The answer‚Ä¶

    ‚àà-decidable‚ÇÅ : Decidable _‚àà_
    ‚àà-decidable‚ÇÅ e []       = {!!}
    ‚àà-decidable‚ÇÅ e (x ‚à∑ xs) = {!!}

    -- First hole asks us for `Dec (e ‚àà [])', which reduces to `Dec ‚ä•'.  We use the `no' constructor:

    ‚àà-decidable‚ÇÇ : Decidable _‚àà_
    ‚àà-decidable‚ÇÇ e []       = no {!!}
    ‚àà-decidable‚ÇÇ e (x ‚à∑ xs) = {!!}

    -- First hole now requires us show that ¬¨ ‚ä•.  This is a synonym for ‚ä• ‚Üí ‚ä•.  This is the type of the
    -- id combinator:

    ‚àà-decidable‚ÇÉ : Decidable _‚àà_
    ‚àà-decidable‚ÇÉ e []       = no id
    ‚àà-decidable‚ÇÉ e (x ‚à∑ xs) = {!!}

    -- Now the hole above has some wacky type.  Why?  Because further reduction is dependent on the results
    -- of ‚â°-decidable e x (the latter part of the type).  We must use with to inspect that, as follows:

    ‚àà-decidable‚ÇÑ : Decidable _‚àà_
    ‚àà-decidable‚ÇÑ e []       = no id
    ‚àà-decidable‚ÇÑ e (x ‚à∑ xs) with ‚â°-decidable e x
    ... | yes e‚â°x = {!!}
    ... | no  e‚â¢x = {!!}

    -- The first hole now has type `Dec ‚ä§'.  We use `yes', which then requires we produce a value of type `‚ä§'.
    -- This is easy --- it's just the unit value, which we previously called it, but which is called `tt' in
    -- the Agda standard library:

    ‚àà-decidable‚ÇÖ : Decidable _‚àà_
    ‚àà-decidable‚ÇÖ e []       = no id
    ‚àà-decidable‚ÇÖ e (x ‚à∑ xs) with ‚â°-decidable e x
    ... | yes e‚â°x = yes tt
    ... | no  e‚â¢x = {!!}

    -- The final hole requires that we construct some value of type `Dec (e ‚àà xs)'.  But we know how to do this
    -- by making a recursive call to ‚àà-decidable itself, and with that we are done:

    ‚àà-decidable : Decidable _‚àà_
    ‚àà-decidable e []       = no id
    ‚àà-decidable e (x ‚à∑ xs) with ‚â°-decidable e x
    ... | yes e‚â°x = yes tt
    ... | no  e‚â¢x = ‚àà-decidable e xs

    -- We can now make use of ‚àà-decidable to define nub:

    nub‚ÇÖ : List A ‚Üí List A
    nub‚ÇÖ xs = go [] xs
      where
        go : List A ‚Üí List A ‚Üí List A
        go buffer []       = buffer
        go buffer (x ‚à∑ xs) with ‚àà-decidable x buffer
        ... | yes x‚ààbuffer = go buffer xs
        ... | no  x‚àâbuffer = go (buffer ++ [ x ]) xs

    -- And we are done

  -- Let's now use nub‚ÇÖ by opening AssumesDecidability:

  open AssumesDecidability Bool-Decidable

  nub-test‚ÇÉ : _
  nub-test‚ÇÉ = {!nub‚ÇÖ (true ‚à∑ true ‚à∑ false ‚à∑ [])!}

  -- And it seems to compute the correct result‚Ä¶

  -- Now, at first sight all of the decidability results above seem like much more work than working
  -- with Boolean functions to perform tests.  But, as mentioned, Booleans are very uninformative.
  -- A Boolean result will only tell you whether some test has succeeded or not --- it will never be
  -- able to tell you why that result has succeeded.  Using the Dec datatype, we not only get the
  -- ability to tell when a test has succeeded (i.e. whether e ‚àà xs, or whether b ‚â° c, and so on),
  -- but we get a concrete proof that asserts or denies that fact which we can use further.  As a result
  -- Booleans and Boolean-valued functions are almost always eschewed in Agda in favour of working with
  -- decidable fragments of various relations.

  -- EXERCISE: complete the following:

  -- Even though there are no inhabitants of ‚ä• we can still talk in the abstract as if there were‚Ä¶
  ‚ä•-Decidable : Decidable (_‚â°_ {A = ‚ä•})
  ‚ä•-Decidable () f

  -- Note how the contents of Data.Unit is not in scope here as we imported it in a submodule, AssumesDecidability,
  -- above and not at the top level.  We import it again at the top level.
  open import Data.Unit

  ‚ä§-Decidable : Decidable (_‚â°_ {A = ‚ä§})
  ‚ä§-Decidable tt tt = yes refl

  ‚Ñï-Decidable : Decidable (_‚â°_ {A = ‚Ñï})
  ‚Ñï-Decidable ‚Ñï.zero ‚Ñï.zero = yes refl
  ‚Ñï-Decidable ‚Ñï.zero (‚Ñï.suc n) = no (Œª ())
  ‚Ñï-Decidable (‚Ñï.suc m) ‚Ñï.zero = no (Œª ())
  ‚Ñï-Decidable (‚Ñï.suc m) (‚Ñï.suc n) with ‚Ñï-Decidable m n
  ... | yes p = yes (cong ‚Ñï.suc p)
  ... | no ¬¨p = no (¬¨p ‚àò suc-injective)
    where
    suc-injective : ‚àÄ {m n} ‚Üí ‚Ñï.suc m ‚â° ‚Ñï.suc n ‚Üí m ‚â° n
    suc-injective refl = refl

  -- A little harder, and requires you to lift a decidability result on elements to a decidability result
  -- on lists of elements‚Ä¶
  List-A-Decidable : {‚Ñì : Level} ‚Üí {A : Set ‚Ñì} ‚Üí (‚â°-decidable : Decidable (_‚â°_ {A = A})) ‚Üí Decidable (_‚â°_ {A = List A})
  List-A-Decidable ‚â°-decidable [] [] = yes refl
  List-A-Decidable ‚â°-decidable [] (x ‚à∑ ys) = no (Œª ())
  List-A-Decidable ‚â°-decidable (x ‚à∑ xs) [] = no (Œª ())
  List-A-Decidable ‚â°-decidable (x ‚à∑ xs) (y ‚à∑ ys) with ‚â°-decidable x y
  List-A-Decidable ‚â°-decidable (x ‚à∑ xs) (y ‚à∑ ys) | yes x‚â°y with List-A-Decidable ‚â°-decidable xs ys
  List-A-Decidable ‚â°-decidable (x ‚à∑ xs) (y ‚à∑ ys) | yes x‚â°y | yes xs‚â°ys = yes (cong‚ÇÇ _‚à∑_ x‚â°y xs‚â°ys)
  List-A-Decidable ‚â°-decidable (x ‚à∑ xs) (y ‚à∑ ys) | yes _ | no ¬¨p = no (¬¨p ‚àò tails-‚â°)
    where
    tails-‚â° : ‚àÄ {‚Ñì} {A : Set ‚Ñì} {x y : A} {xs ys : List A} ‚Üí x ‚à∑ xs ‚â° y ‚à∑ ys ‚Üí xs ‚â° ys
    tails-‚â° refl = refl
  List-A-Decidable ‚â°-decidable (x ‚à∑ xs) (y ‚à∑ ys) | no ¬¨p = no (¬¨p ‚àò heads-‚â°)
    where
    heads-‚â° : ‚àÄ {‚Ñì} {A : Set ‚Ñì} {x y : A} {xs ys : List A} ‚Üí x ‚à∑ xs ‚â° y ‚à∑ ys ‚Üí x ‚â° y
    heads-‚â° refl = refl

  -- How about lifting two such results?

  -- This is Agda's implementation of the disjoint union type that we defined in exercises 1-5.  It has the same
  -- name as we used.
  open import Data.Sum

  ‚äé-A-B-Decidable : {‚Ñì : Level} ‚Üí {A B : Set ‚Ñì} ‚Üí (‚â°-A-decidable : Decidable (_‚â°_ {A = A})) ‚Üí
                      (‚â°-B-Decidable : Decidable (_‚â°_ {A = B})) ‚Üí Decidable (_‚â°_ {A = A ‚äé B})
  ‚äé-A-B-Decidable ‚â°-A-decidable ‚â°-B-decidable (inj‚ÇÅ x) (inj‚ÇÅ y) with ‚â°-A-decidable x y
  ... | yes p = yes (cong inj‚ÇÅ p)
  ... | no ¬¨p = no (¬¨p ‚àò inj‚ÇÅ-injective)
    where
    inj‚ÇÅ-injective : ‚àÄ {a b} {A : Set a} {B : Set b} {x y : A} ‚Üí inj‚ÇÅ {b = b} {B = B} x ‚â° inj‚ÇÅ y ‚Üí x ‚â° y
    inj‚ÇÅ-injective refl = refl
  ‚äé-A-B-Decidable ‚â°-A-decidable ‚â°-B-decidable (inj‚ÇÅ _) (inj‚ÇÇ _) = no (Œª ())
  ‚äé-A-B-Decidable ‚â°-A-decidable ‚â°-B-decidable (inj‚ÇÇ _) (inj‚ÇÅ _) = no (Œª ())
  ‚äé-A-B-Decidable ‚â°-A-decidable ‚â°-B-decidable (inj‚ÇÇ x) (inj‚ÇÇ y) with ‚â°-B-decidable x y
  ... | yes p = yes (cong inj‚ÇÇ p)
  ... | no ¬¨p = no (¬¨p ‚àò inj‚ÇÇ-injective)
    where
    inj‚ÇÇ-injective : ‚àÄ {a b} {A : Set a} {B : Set b} {x y : B} ‚Üí inj‚ÇÇ {a = a} {A = A} x ‚â° inj‚ÇÇ y ‚Üí x ‚â° y
    inj‚ÇÇ-injective refl = refl
