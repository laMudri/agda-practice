-- First steps in Agda: records, and expressing algebraic structures

module E9 where

  open import Level

  open import Relation.Binary.PropositionalEquality

  -- Consider the last exercise.  We showed that both _*_ and _+_ were commutative.
  -- Each time, we wrote out by hand either (m n : ‚Ñï) ‚Üí m * n ‚â° n * m or
  -- (m n : ‚Ñï) ‚Üí m + n ‚â° n + m.  But both of these types are similar, and only differ
  -- in the particular function being considered.  Can we abstract these using a function
  -- that returns a type?  Yes:

  IsCommutative : {‚Ñì : Level} ‚Üí {A : Set ‚Ñì} ‚Üí (A ‚Üí A ‚Üí A) ‚Üí Set ‚Ñì
  IsCommutative {‚Ñì} {A} _‚Ä¢_ = (x y : A) ‚Üí x ‚Ä¢ y ‚â° y ‚Ä¢ x

  -- The syntax {‚Ñì} {A} allows us to refer explicitly to a type that has been marked implicit.
  --
  -- We can now use IsCommutative, as before:

  open import Data.Nat
    hiding (fold)

  +-commutative : IsCommutative _+_
  +-commutative zero    n = {!!}
  +-commutative (suc m) n = {!!}

  *-commutative : IsCommutative _*_
  *-commutative zero    n = {!!}
  *-commutative (suc m) n = {!!}

  -- Much nicer, and this ensures that all lemmas that state the commutativity of some function
  -- are stated in exactly the same way.

  -- Onward.  Let's introduce records and show how they can be used to capture `structured sets'
  -- from mathematics like algebraic structures (monoids, rings, groups, etc.) as well as ordered
  -- structures (lattices, partial orders, etc.)

  -- Here is a record:

  record ùüô : Set where
    constructor
      it

  -- It's the familiar ùüô type from the first 5 exercises.  We have provided a way to construct the
  -- record via the `constructor' keyword, and an explicit constructor name.
  --
  -- We can use records like any other bit of data:

  silly-example‚ÇÅ : {A : Set} ‚Üí A ‚Üí (ùüô ‚Üí A)
  silly-example‚ÇÅ e = Œª x ‚Üí e

  silly-example‚ÇÇ : {A : Set} ‚Üí (ùüô ‚Üí A) ‚Üí A
  silly-example‚ÇÇ f = f it

  -- Records may also have fields.  Here's the dependent-pair type (Œ£-type) expressed as a record:

  record Œ£ {‚Ñì : Level} (A : Set ‚Ñì) (P : A ‚Üí Set ‚Ñì) : Set ‚Ñì where
    constructor
      _,_
    field
      fst : A
      snd : P fst

  -- Note how the types of later fields may depend on earlier fields.  Here snd has type `P fst',
  -- where `fst' itself is a field that appeared in the record prior to `snd'.  Using this style of
  -- definition for Œ£-types we need not explicitly define the `fst' and `snd' projection functions
  -- separately --- we can define them as part of the type itself.
  --
  -- Naturally, the definition of Œ£ above satisfies the same properties as our old definition:

  _√ó_ : Set ‚Üí Set ‚Üí Set
  A √ó B = Œ£ A (Œª x ‚Üí B)

  curry-example : (A B C : Set) ‚Üí (A ‚Üí B ‚Üí C) ‚Üí A √ó B ‚Üí C
  curry-example A B C f A√óB = f (Œ£.fst A√óB) (Œ£.snd A√óB)

  -- Here we use the _,_ constructor of Œ£ to make a dependent pair type:
  uncurry-example : (A B C : Set) ‚Üí (A √ó B ‚Üí C) ‚Üí A ‚Üí B ‚Üí C
  uncurry-example A B C f a b = f (a , b)

  -- You'll note that `fst' and `snd' are namespaced --- we have to refer to them using a hierarchical
  -- identifier, using Œ£.fst and Œ£.snd instead of fst and snd as we did before.  We can change that by
  -- opening the record as soon as we have defined it:

  open Œ£ public

  -- Now `fst' and `snd' are available as top-level identifiers:

  foo : _
  foo = fst

  -- And all is well again.
  --
  -- Records need not have explicit constructors.  The following record captures the notion of a point
  -- in ‚Ñï¬≥:

  record Point : Set where
    field
      x y z : ‚Ñï

  -- We can construct such a record as follows:

  origin : Point
  origin = record { x = ‚Ñï.zero ; y = ‚Ñï.zero ; z = ‚Ñï.zero }

  -- Here zero is qualified as the Level module also exports a constant called zero, and Agda complains about
  -- name clashes.
  --
  -- Records with constructors can also be constructed using the above syntax, by the way.  Using the refine
  -- key combination (<Ctrl> + <c> + <r>) in a hole with record type will automatically introduce the above
  -- expansion.  EXERCISE: Try it yourself:

  one-one-one : Point
  one-one-one = record { x = 1 ; y = 1 ; z = 1 }

  -- So, what are records?  Records are Œ£-types that are built in to the Agda language itself, albeit with
  -- one key difference, namely the entries are given an explicit name that we can refer to, rather than a
  -- position.  A record of the form:

  record NotZero : Set where
    constructor
      mkNotZero
    field
      ‚Ä¢ : ‚Ñï
      ‚Ä¢-not-zero : ‚Ä¢ ‚â¢ ‚Ñï.zero
  
  -- Is translated into something akin to:

  NotZero‚Ä≤ : Set
  NotZero‚Ä≤ = Œ£ ‚Ñï (Œª x ‚Üí x ‚â¢ ‚Ñï.zero)

  mkNotZero‚Ä≤ : (‚Ä¢ : ‚Ñï) ‚Üí ‚Ä¢ ‚â¢ ‚Ñï.zero ‚Üí NotZero‚Ä≤
  mkNotZero‚Ä≤ ‚Ä¢ ‚Ä¢-not-zero = ‚Ä¢ , ‚Ä¢-not-zero

  -- inside Agda.  If you have more fields in a record, then Agda will automatically nest the Œ£-types.  Fields
  -- then refer to positions within this `telescope' of nested Œ£'s.  There are other slight differences between
  -- record declarations and data declarations relating to type-checking and reduction that are not
  -- important and we will not discuss here.
  --
  -- Records are for `bundling' up pieces of related data.  Some of this data, as we have seen in the case of
  -- NotZero above, can be proofs relating to other pieces of data in a record.  In Agda, one of the main uses of
  -- records are for modelling structured sets, such as monoids, groups, rings, lattices, partial orders, and
  -- so on.
  --
  -- Recall that a monoid ‚ü®M, ‚Ä¢, Œµ‚ü© is a tuple consisting of a set M, a binary operation on M called ‚Ä¢, and a
  -- left- and right- identity for ‚Ä¢ called Œµ.  This tuple is accompanied by a series of laws that it must satisfy
  -- in order to be a monoid, namely:
  --
  --                           Œµ ‚àà M
  --   ‚àÄe ‚àà M. ‚àÄf ‚àà M.         e ‚Ä¢ f ‚àà M,                 (CLOSURE OF ‚Ä¢)
  --   ‚àÄe ‚àà M. ‚àÄf ‚àà M. ‚àÄg ‚àà M. e ‚Ä¢ (f ‚Ä¢ g) = (e ‚Ä¢ f) ‚Ä¢ g  (ASSOCIATIVITY)
  --   ‚àÄe ‚àà M.                 e ‚Ä¢ Œµ = Œµ ‚Ä¢ e = e          (IDENTITY)
  --
  -- From the first two laws we get automatically that e ‚Ä¢ (f ‚Ä¢ g), (e ‚Ä¢ f) ‚Ä¢ g, e ‚Ä¢ Œµ and Œµ ‚Ä¢ e are all in M.
  --
  -- The question arises: how can we best model this in Agda?  We can use a record, like so:

  record Monoid‚ÇÅ : Set‚ÇÅ where
    field
      Carrier       : Set
      _‚Ä¢_           : Carrier ‚Üí Carrier ‚Üí Carrier
      Œµ             : Carrier
      Œµ-identity‚Çó   : (f : Carrier) ‚Üí Œµ ‚Ä¢ f ‚â° f
      Œµ-identity·µ£   : (e : Carrier) ‚Üí e ‚Ä¢ Œµ ‚â° e
      ‚Ä¢-associative : (e f g : Carrier) ‚Üí e ‚Ä¢ (f ‚Ä¢ g) ‚â° (e ‚Ä¢ f) ‚Ä¢ g

  -- Note here that we have explicitly named the carrier set M from ‚ü®M, ‚Ä¢, Œµ‚ü© above as Carrier.  Note also that
  -- as Carrier is of type Set, the entire record must be in a larger universe, Set‚ÇÅ, to be able to contain it.
  --
  -- Now, recalling all of our previous discussion, we can start to make this definition more sophisticated.
  -- First, let's deal with the issue of universe levels:

  record Monoid‚ÇÇ {‚Ñì ‚Ñì‚Ä≤ : Level} : Set (Level.suc (‚Ñì Level.‚äî ‚Ñì‚Ä≤)) where
    field
      Carrier       : Set ‚Ñì
      _‚Ä¢_           : Carrier ‚Üí Carrier ‚Üí Carrier
      Œµ             : Carrier
      Œµ-identity‚Çó   : (f : Carrier) ‚Üí Œµ ‚Ä¢ f ‚â° f
      Œµ-identity·µ£   : (e : Carrier) ‚Üí e ‚Ä¢ Œµ ‚â° e
      ‚Ä¢-associative : (e f g : Carrier) ‚Üí e ‚Ä¢ (f ‚Ä¢ g) ‚â° (e ‚Ä¢ f) ‚Ä¢ g

  -- You'll note that there's no name clashes here with fields previously declared in Monoid‚ÇÅ because we didn't
  -- open the Monoid‚ÇÅ record using `open Monoid‚ÇÅ public', therefore all fields are still qualified.
  --
  -- Here, we've done a little trick with the universe levels: ‚Ñì is the universe that Monoid‚ÇÇ.Carrier sits in.
  -- However, we may want Carrier to remain in Set ‚Ñì, for some reason, but the entire Monoid‚ÇÇ record to be
  -- lifted into Set (suc (suc ‚Ñì)).  To allow this, we parameterise Monoid‚ÇÇ by two levels and tell Agda to
  -- automatically try to infer them.  We then have Monoid‚ÇÇ reside in `suc (‚Ñì ‚äî ‚Ñì‚Ä≤)' which both guarantees that
  -- Monoid‚ÇÇ resides in a universe level at least one above that of Carrier (the `suc' part) and can move
  -- up the universe hierarchy freely as required (the max, `_‚äî_' part).
  --
  -- Let's make Monoid‚ÇÇ even more sophisticated.  The notion of binary operation on a type seems like a common
  -- notion for algebraic structures.  Let's abstract that:

  BinOp : ‚àÄ {‚Ñì} ‚Üí Set ‚Ñì ‚Üí Set ‚Ñì
  BinOp S = S ‚Üí S ‚Üí S

  record Monoid‚ÇÉ {‚Ñì ‚Ñì‚Ä≤} : Set (Level.suc (‚Ñì Level.‚äî ‚Ñì‚Ä≤)) where
    field
      Carrier       : Set ‚Ñì
      _‚Ä¢_           : BinOp Carrier
      Œµ             : Carrier
      Œµ-identity‚Çó   : (f : Carrier) ‚Üí Œµ ‚Ä¢ f ‚â° f
      Œµ-identity·µ£   : (e : Carrier) ‚Üí e ‚Ä¢ Œµ ‚â° e
      ‚Ä¢-associative : (e f g : Carrier) ‚Üí e ‚Ä¢ (f ‚Ä¢ g) ‚â° (e ‚Ä¢ f) ‚Ä¢ g

  -- We've now abstracted the notion of binary operation out into its own definition, BinOp.  You may notice two
  -- things about this definition and the Monoid‚ÇÉ record.  The first is the type of BinOp.  Instead of
  --
  --    {‚Ñì : Level} ‚Üí Set ‚Ñì ‚Üí Set ‚Ñì
  --
  -- I have used:
  --
  --    ‚àÄ {‚Ñì} ‚Üí Set ‚Ñì ‚Üí Set ‚Ñì
  --
  -- Which are equivalent, when Agda can work out what the type of ‚Ñì is (it can't always, in which case you will
  -- get canary yellow highlighting everywhere).  Clearly ‚Ñì must be of type Level, Agda can infer this, and therefore
  -- we can use the ‚àÄ {‚Ñì} ‚Üí ‚Ä¶ syntax instead.
  --
  -- The types
  --
  --     (‚Ñì : Level) ‚Üí Set ‚Ñì ‚Üí Set ‚Ñì
  --
  -- and
  --
  --     ‚àÄ ‚Ñì ‚Üí Set ‚Ñì ‚Üí Set ‚Ñì
  --
  -- are equivalent too.  Notice the use of braces `{' and `}' in the first pair of types to indicate the type should
  -- be inferred, and the lack of them in the second pair, indicating that the type will be given explicitly by the
  -- programmer.  Keep in mind that in
  --
  --     ‚àÄ {‚Ñì} ‚Üí Set ‚Ñì ‚Üí Set ‚Ñì
  --
  -- Agda is being asked to infer *two* things.  First, right now, Agda is being asked to infer that ‚Ñì is of type Level
  -- from how ‚Ñì is used in the type signature --- this is the `‚àÄ' part.  Second, later, when BinOp is used, Agda is
  -- being asked to infer the universe level ‚Ñì itself from the surrounding context of `BinOps' usage.  This is the
  -- `{' and `}' part.
  --
  -- You'll see a similar pattern in the header of Monoid‚ÇÉ.  Instead of using the syntax
  --
  --     record Monoid‚ÇÉ {‚Ñì ‚Ñì‚Ä≤ : Level} : Set ‚Ä¶ where
  --
  -- I have used instead
  --
  --     record Monoid‚ÇÉ {‚Ñì ‚Ñì‚Ä≤} : Set ‚Ä¶ where
  --
  -- which has a similar effect on Agda as the use of `‚àÄ {‚Ä¶} ‚Üí ‚Ä¶' discussed above.
  --
  -- These features are used to reduce the complexity of type signatures and reduce the burden on the programmer
  -- when writing them.  You'll see them being used regularly in `real' Agda code.
  --
  -- Let's press on: the definitions of identity (both left and right) and associativity look like they will be useful
  -- elsewhere, too, perhaps when defining other algebraic structures, later on.  Let's abstract those, too:

  IsLeftIdentity : ‚àÄ {‚Ñì} ‚Üí {A : Set ‚Ñì} ‚Üí A ‚Üí BinOp A ‚Üí Set ‚Ñì
  IsLeftIdentity {‚Ñì} {A} Œµ _‚Ä¢_ = (f : A) ‚Üí Œµ ‚Ä¢ f ‚â° f

  IsRightIdentity : ‚àÄ {‚Ñì} ‚Üí {A : Set ‚Ñì} ‚Üí A ‚Üí BinOp A ‚Üí Set ‚Ñì
  IsRightIdentity {‚Ñì} {A} Œµ _‚Ä¢_ = (e : A) ‚Üí e ‚Ä¢ Œµ ‚â° e

  IsAssociative : ‚àÄ {‚Ñì} ‚Üí {A : Set ‚Ñì} ‚Üí BinOp A ‚Üí Set ‚Ñì
  IsAssociative {‚Ñì} {A} _‚Ä¢_ = (e f g : A) ‚Üí e ‚Ä¢ (f ‚Ä¢ g) ‚â° (e ‚Ä¢ f) ‚Ä¢ g

  record Monoid‚ÇÑ {‚Ñì ‚Ñì‚Ä≤} : Set (Level.suc (‚Ñì Level.‚äî ‚Ñì‚Ä≤)) where
    field
      Carrier       : Set ‚Ñì
      _‚Ä¢_           : BinOp Carrier
      Œµ             : Carrier
      Œµ-identity‚Çó   : IsLeftIdentity Œµ _‚Ä¢_
      Œµ-identity·µ£   : IsRightIdentity Œµ _‚Ä¢_
      ‚Ä¢-associative : IsAssociative _‚Ä¢_

  -- Looking better.  But what if we want to write a function where we are given some _‚Ä¢_ and Œµ and wish to assume
  -- that these functions form a monoid structure on some type without having to explicitly package them up with a
  -- Carrier type in a Monoid record?  The answer is to split the Monoid‚ÇÑ record into two: one that captures the
  -- laws that binary operations on, and elements of, Carrier must satisfy to form a monoid, and the other that
  -- bundles Carrier up with _‚Ä¢_ and Œµ, like so:

  record IsMonoid {‚Ñì} {A : Set ‚Ñì} (Œµ : A) (_‚Ä¢_ : BinOp A) : Set ‚Ñì where
    field
      Œµ-identity‚Çó   : IsLeftIdentity Œµ _‚Ä¢_
      Œµ-identity·µ£   : IsRightIdentity Œµ _‚Ä¢_
      ‚Ä¢-associative : IsAssociative _‚Ä¢_

  record Monoid‚ÇÖ {‚Ñì ‚Ñì‚Ä≤} : Set (Level.suc (‚Ñì Level.‚äî ‚Ñì‚Ä≤)) where
    field
      Carrier   : Set ‚Ñì
      _‚Ä¢_       : BinOp Carrier
      Œµ         : Carrier
      is-monoid : IsMonoid Œµ _‚Ä¢_

  -- All that is left to do now is to open `is-monoid' within the Monoid record itself so that we have access to
  -- the proofs that it contains within that record:

  record Monoid {‚Ñì ‚Ñì‚Ä≤} : Set (Level.suc (‚Ñì Level.‚äî ‚Ñì‚Ä≤)) where
    field
      Carrier   : Set ‚Ñì
      _‚Ä¢_       : BinOp Carrier
      Œµ         : Carrier
      is-monoid : IsMonoid Œµ _‚Ä¢_

    open IsMonoid is-monoid public

  -- Note the indentation here.  The `open IsMonoid is-monoid public' is still within the body of the Monoid
  -- record declaration.  It is not a top level declaration like:

  -- open Monoid public
  --
  -- (commented to avoid name clashes below)

  -- That brings the contents of the Monoid record into scope for all code following that declaration!
  --
  -- Let's now try to use the Monoid record.  First we will provide some proof that the Monoid record actually
  -- has captured something useful (i.e. it is not describing something that doesn't exist) by demonstrating
  -- that ‚ü®‚Ñï, _+_, 0‚ü© is a monoid:

  -- EXERCISE: complete the following:

  zero-+-IsLeftIdentity : IsLeftIdentity ‚Ñï.zero _+_
  zero-+-IsLeftIdentity f = refl

  zero-+-IsRightIdentity : IsRightIdentity ‚Ñï.zero _+_
  zero-+-IsRightIdentity ‚Ñï.zero = refl
  zero-+-IsRightIdentity (‚Ñï.suc e) = cong ‚Ñï.suc (zero-+-IsRightIdentity e)

  +-IsAssociative : IsAssociative _+_
  +-IsAssociative ‚Ñï.zero f g = refl
  +-IsAssociative (‚Ñï.suc e) f g = cong ‚Ñï.suc (+-IsAssociative e f g)

  ‚Ñï-zero-+-IsMonoid : IsMonoid ‚Ñï.zero _+_
  ‚Ñï-zero-+-IsMonoid = record { Œµ-identity‚Çó = zero-+-IsLeftIdentity ; Œµ-identity·µ£ = zero-+-IsRightIdentity ; ‚Ä¢-associative = +-IsAssociative }

  ‚Ñï-zero-+-Monoid : ‚àÄ {‚Ñì‚Ä≤} ‚Üí Monoid {‚Ñì‚Ä≤ = ‚Ñì‚Ä≤}
  ‚Ñï-zero-+-Monoid = record { Carrier = ‚Ñï ; _‚Ä¢_ = _+_ ; Œµ = ‚Ñï.zero ; is-monoid = ‚Ñï-zero-+-IsMonoid }

  -- Great, so we now know that there exists at least one inhabitant of the Monoid type (in fact, List along with _++_ and []
  -- also form a monoid, as does ‚Ñï along with _*_ and 1, and perhaps you'd like to demonstrate that fact by creating two
  -- more inhabitants of Monoid below), what can we do with it?

  one-*-IsLeftIdentity : IsLeftIdentity (‚Ñï.suc ‚Ñï.zero) _*_
  one-*-IsLeftIdentity f = zero-+-IsRightIdentity f

  one-*-IsRightIdentity : IsRightIdentity (‚Ñï.suc ‚Ñï.zero) _*_
  one-*-IsRightIdentity ‚Ñï.zero = refl
  one-*-IsRightIdentity (‚Ñï.suc e) = cong ‚Ñï.suc (one-*-IsRightIdentity e)

  +-*-distrib : ‚àÄ x y z ‚Üí (x + y) * z ‚â° x * z + y * z
  +-*-distrib ‚Ñï.zero y z = refl
  +-*-distrib (‚Ñï.suc x) y z rewrite sym (+-IsAssociative z (x * z) (y * z)) =
    cong (_+_ z) (+-*-distrib x y z)

  *-IsAssociative : IsAssociative _*_
  *-IsAssociative ‚Ñï.zero f g = refl
  *-IsAssociative (‚Ñï.suc e) f g
    rewrite +-*-distrib f (e * f) g
          | *-IsAssociative e f g = refl

  ‚Ñï-one-*-IsMonoid : IsMonoid (‚Ñï.suc ‚Ñï.zero) _*_
  ‚Ñï-one-*-IsMonoid = record { Œµ-identity‚Çó = one-*-IsLeftIdentity
                            ; Œµ-identity·µ£ = one-*-IsRightIdentity
                            ; ‚Ä¢-associative = *-IsAssociative
                            }

  ‚Ñï-one-*-Monoid : ‚àÄ {‚Ñì‚Ä≤} ‚Üí Monoid {‚Ñì‚Ä≤ = ‚Ñì‚Ä≤}
  ‚Ñï-one-*-Monoid = record { Carrier = ‚Ñï
                          ; _‚Ä¢_ = _*_
                          ; Œµ = ‚Ñï.suc ‚Ñï.zero
                          ; is-monoid = ‚Ñï-one-*-IsMonoid
                          }

  -- Recall (or perhaps, be made aware), that we can make some very general definitions using monoids.  We can interpret
  -- _‚Ä¢_ as being a multiplication, and define a general version of exponentiation, that works for all monoids.  Similarly,
  -- we could interpret _‚Ä¢_ as some accumulation function and derive a general notion of fold over lists, that works for
  -- all monoids.  Let's do that now using another familiar Agda feature: nested parameterised modules:

  -- We'll need this below:
  open import Data.List

  module AssumesMonoid {‚Ñì ‚Ñì‚Ä≤} (monoid : Monoid {‚Ñì} {‚Ñì‚Ä≤}) where

    -- This lets us refer to `monoid's contents without having to qualify everything through the entirety of this
    -- nested module:
    open Monoid monoid public

    -- Let's define a general monoidal fold, first:

    fold : List Carrier ‚Üí Carrier
    fold []       = Œµ
    fold (x ‚à∑ xs) = x ‚Ä¢ fold xs

    -- Let's show some properties of this function‚Ä¶
    -- EXERCISE: complete the following:

    ++-fold : ‚àÄ xs ys ‚Üí fold (xs ++ ys) ‚â° fold xs ‚Ä¢ fold ys
    ++-fold [] ys = sym (Œµ-identity‚Çó _)
    ++-fold (x ‚à∑ xs) ys rewrite ++-fold xs ys =
      ‚Ä¢-associative x (fold xs) (fold ys)

    -- Remember, you have access to all of the proofs such as Œµ-identity·µ£‚Ä¶

    -- Now, let's define a general exponentiation function:

    exp : Carrier ‚Üí ‚Ñï ‚Üí Carrier
    exp e zero    = Œµ
    exp e (suc m) = e ‚Ä¢ exp e m

    -- And show some properties of that‚Ä¶
    -- EXERCISE: complete the following:

    exp-+ : ‚àÄ e m n ‚Üí exp e (m + n) ‚â° exp e m ‚Ä¢ exp e n
    exp-+ e ‚Ñï.zero n = sym (Œµ-identity‚Çó _)
    exp-+ e (‚Ñï.suc m) n rewrite exp-+ e m n = ‚Ä¢-associative e _ _

    Œµ-exp : ‚àÄ m ‚Üí exp Œµ m ‚â° Œµ
    Œµ-exp ‚Ñï.zero = refl
    Œµ-exp (‚Ñï.suc m) rewrite Œµ-identity‚Çó (exp Œµ m) = Œµ-exp m

    -- Perhaps there's some other properties you can spot about these functions and prove.  Most of the
    -- laws of exponents hold, in a more general form, for the `exp' function, though one, interestingly, requires
    -- commutativity of _‚Ä¢_, which isn't true in general for plain monoids.  We'll discuss this in the next
    -- exercise.

    exp-one : ‚àÄ e ‚Üí exp e 1 ‚â° e
    exp-one e = Œµ-identity·µ£ e

  -- Let's test our general folds and exponentiation:

  open AssumesMonoid {Level.zero} {Level.zero} ‚Ñï-zero-+-Monoid public
  -- We provided explicit universe levels to stop the annoying yellow highlighting!

  fold-test : _
  fold-test = {!fold (‚Ñï.zero ‚à∑ ‚Ñï.suc ‚Ñï.zero ‚à∑ ‚Ñï.suc (‚Ñï.suc ‚Ñï.zero) ‚à∑ [])!}

  -- Normalise the above with <Ctrl> + <c> + <n> --- what happens?  How about:

  exp-test : _
  exp-test = {!exp (‚Ñï.suc (‚Ñï.suc ‚Ñï.zero)) (‚Ñï.suc (‚Ñï.suc ‚Ñï.zero))!}

  -- Normalise the above with <Ctrl> + <c> + <n> --- what happens?

  -- These functions now work on *any* monoid.  We just need to open the AssumesMonoid module with a concrete
  -- implementation of a monoid to get fold and exponentiation functions that are tailored specifically to that
  -- monoid.  For the ‚ü®‚Ñï, +, 0‚ü© monoid that we provided above, fold is the equivalent of summing a list of natural
  -- numbers, whilst exponentiation is the equivalent of summing a given number a certain number of times.  If you
  -- provided a concrete implementation of the ‚ü®List, _++_, []‚ü© monoid, as suggested above, then fold is akin to
  -- concatenating a list of lists (i.e. it is the familiar `flatten' operation on lists), whilst exp is akin to
  -- appending a list to itself a given number of times (i.e. replicating a list n-times).
